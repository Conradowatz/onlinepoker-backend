// Type definitions for pokersolver 2.1
// Project: https://github.com/goldfire/pokersolver
// Definitions by: Conrad Owatz <https://github.com/Conradowatz>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/*~ If this module is a UMD module that exposes a global variable 'myLib' when
 *~ loaded outside a module loader environment, declare that global here.
 *~ Otherwise, delete this declaration.
 */
export as namespace pokersolver;

export const values: string[];

export class Card {
    value: ValueType;
    suit: SuitType;
    rank: number;
    wildValue: ValueType;

    constructor(str: CardString);
    toString():string;
    static sort(a: Card, b: Card):number;
}

export class Hand {
    cardPool: Card[];
    cards: Card[];
    suits: Map<SuitType, Card[]>;
    values: ValueType[];
    wilds: Card[];
    name: NameType;
    descr: string;
    game: Game;
    sfLength: number;
    alwaysQualifies: number;

    constructor(cards: ReadonlyArray<CardString>, name: NameType, game: GameType, canDisqualify: boolean);
    compare(a: Hand):number;
    loseTo(hand: Hand):boolean;
    getNumCardsByRank(val: number):number;
    getCardsForFlush(suit: string, setRanks: boolean):Card[];
    resetWildCards():void;
    nextHighest():Card[];
    toString():string;
    toArray():Card[];
    qualifiesHigh():boolean;
    static solve(cards: ReadonlyArray<string>, game: GameType, canDisqualify: boolean):Hand;
    static winners(hands: Hand[]):Hand[];
    static stripWilds(cards: ReadonlyArray<CardString>, game: Game):[Card[], Card[]];
}
export class StraightFlush extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class RoyalFlush extends StraightFlush {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class NaturalRoyalFlush extends RoyalFlush {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class WildRoyalFlush extends RoyalFlush {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class FiveOfAKind extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class FourOfAKindPairPlus extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class FourOfAKind extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class FourWilds extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class ThreeOfAKindTwoPair extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class FullHouse extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class Flush extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class Straight extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class TwoThreeOfAKind extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class ThreeOfAKind extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class ThreePair extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class TwoPair extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class OnePair extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}
export class HighCard extends Hand {
    constructor(cards: ReadonlyArray<CardString>, game: GameType, canDisqualify: boolean);
}

export class PaiGowPokerHelper {
    baseHand: Hand;
    hiHand: Hand;
    loHand: Hand;
    game: Game;
    loGame: Game;
    hiGame: Game;
    constructor(hand: Hand);
    splitHouseWay():void;
    getSFData(cards: Card[]):[Card[], Card[]];
    qualifiesValid():boolean;
    static winners(player: PaiGowPokerHelper, banker: PaiGowPokerHelper): number;
    static setHands(hiHand: CardString[] | Hand): PaiGowPokerHelper;
    static solve(fullHand: CardString[] | Hand): PaiGowPokerHelper;
}

export class Game {
    descr: string;
    cardsInHand: number;
    handValues: [];
    wildValue: ValueType | null;
    wildStatus: number;
    wheelStatus: number;
    sfQualify: number;
    lowestQualified: boolean | null;
    noKickers: boolean | null;

    constructor(descr: string);
}

export type CardString =
  "1d" | "2d" | "3d" | "4d" | "5d" | "6d" | "7d" | "8d" | "9d" | "Td" | "Jd" | "Qd" | "Kd" | "Ad" | "Od"
  | "1c" | "2c" | "3c" | "4c" | "5c" | "6c" | "7c" | "8c" | "9c" | "Tc" | "Jc" | "Qc" | "Kc" | "Ac" | "Oc"
  | "1h" | "2h" | "3h" | "4h" | "5h" | "6h" | "7h" | "8h" | "9h" | "Th" | "Jh" | "Qh" | "Kh" | "Ah" | "Oh"
  | "1s" | "2s" | "3s" | "4s" | "5s" | "6s" | "7s" | "8s" | "9s" | "Ts" | "Js" | "Qs" | "Ks" | "As" | "Os";

export type GameType = "standard" | "jacksbetter" | "joker" | "deuceswild" | "threecard" | "fourcard" | "fourcardbonus" | "paigowpokerfull" | "paigowpokeralt" | "paigowpokersf6" | "paigowpokersf7" | "paigowpokerhi" | "paigowpokerlo";

export type NameType = "Straight Flush" | "Five of a Kind" | "Four of a Kind with Pair or Better" | "Four of a Kind" | "Four Wild Cards" | "Three of a Kind with Two Pair" | "Full House" | "Flush" | "Straight" | "Two Three Of a Kind" | "Three of a Kind" | "Three Pair" | "Two Pair" | "Pair" | "High Card";

export type ValueType = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "T" | "J" | "Q" | "K" | "A" | "O";

export type SuitType = "s" | "d" | "h" | "c";